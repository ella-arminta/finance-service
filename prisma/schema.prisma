// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Companies {
  id          String @id @db.Uuid @default(uuid())
  name        String
  code     String @default("B")
  owner_id    String @db.Uuid
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  deleted_at   DateTime?

  stores    Stores[]
  scheduled_trans Scheduled_Trans[]
  trans Trans[]
  accounts Accounts[]
}

model Stores {
  id   String   @id @db.Uuid @default(uuid())
  code     String @default("BA")
  name        String
  company_id  String @db.Uuid

  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  deleted_at   DateTime?

  journals    Journals[]
  accounts    Accounts[]

  company  Companies? @relation(fields: [company_id], references: [id])
}

model Account_Types {
  id  Int   @default(autoincrement()) @id
  name        String @unique
  description String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  deleted_at   DateTime?

  accounts Accounts[]
}

model Accounts {
  id  String   @id @db.Uuid @default(uuid())
  code Int
  name        String
  account_type_id Int //  kas/bank/giro/piutang/hutang
  store_id String? @db.Uuid
  company_id String @db.Uuid
  deactive Boolean @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  deleted_at   DateTime?

  store Stores? @relation(fields: [store_id], references: [id])
  company Companies @relation(fields: [company_id], references: [id])
  account_type Account_Types @relation(fields: [account_type_id], references: [id])
  auto_debits      Auto_Trans[]      @relation("AccountDebit") // Reverse relation for account_debit
  auto_kredits     Auto_Trans[]      @relation("AccountKredit") // Reverse relation for account_kredit

  scheduleds  Scheduled_Trans_Accs[]
  scheduled_trans Scheduled_Trans[]
  journal_accounts Journal_Accounts[]
  trans Trans[]
}


model Journals {
  id  Int   @default(autoincrement()) @id
  store_id   String @db.Uuid  
  store Stores? @relation(fields: [store_id], references: [id])
  name        String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  journal_accounts Journal_Accounts[]
}

model Journal_Accounts { 
  id Int @default(autoincrement()) @id
  journal_id Int
  account_id String @db.Uuid

  journal Journals? @relation(fields: [journal_id], references: [id])
  account Accounts? @relation(fields: [account_id], references: [id])
}

model Scheduled_Trans {
  id Int   @default(autoincrement()) @id
  company_id String? @db.Uuid
  account_id String @db.Uuid
  type Int
  start_date DateTime
  end_date DateTime
  period String // daily, weekly, monthly, yearly
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int
  updated_by Int

  company Companies? @relation(fields: [company_id], references: [id])
  account Accounts? @relation(fields: [account_id], references: [id])
}

model Scheduled_Trans_Accs {
  id Int   @default(autoincrement()) @id
  schedule_id Int?
  account_id String @db.Uuid
  nominal Int
  description String
  
  account Accounts? @relation(fields: [account_id], references: [id])
}

model Trans {
  id Int   @default(autoincrement()) @id
  company_id String? @db.Uuid
  code String
  account_id String @db.Uuid
  type Int
  trans_date DateTime
  created_date DateTime @default(now())
  updated_date DateTime @updatedAt
  created_by Int
  updated_by Int

  company Companies? @relation(fields: [company_id], references: [id])
  account Accounts? @relation(fields: [account_id], references: [id])
}

model Auto_Trans {
  id Int   @default(autoincrement()) @id
  pos_id Int
  acc_debit_id String @db.Uuid
  acc_kredit_id String @db.Uuid

  account_debit Accounts? @relation("AccountDebit",fields: [acc_debit_id], references: [id])
  account_kredit Accounts? @relation("AccountKredit",fields: [acc_kredit_id], references: [id])
}