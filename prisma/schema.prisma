// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Companies {
  id          String @id @db.Uuid
  name        String
  code     String @default("B")
  owner_id    String @db.Uuid
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  deleted_at   DateTime?

  stores    Stores[]
  accounts Accounts[]
  // trans_account_settings Trans_Account_Settings[]

  @@index([owner_id, deleted_at])
}

model Stores {
  id   String   @id @db.Uuid
  code     String @default("BA")
  name        String
  company_id  String @db.Uuid

  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  deleted_at   DateTime?

  journals    Journals[]
  accounts    Accounts[]
  report_stocks Report_Stocks[]

  company  Companies? @relation(fields: [company_id], references: [id])
  trans Trans[]
  trans_recurring Trans_Recurring[]
  trans_account_settings Trans_Account_Settings[]
  operations Operations[]
  @@index([company_id, deleted_at])
}

model Account_Types {
  id  Int   @default(autoincrement()) @id
  name        String @unique
  code Int
  description String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  deleted_at   DateTime?

  accounts Accounts[]
  @@index([code, deleted_at])
}

model Accounts {
  id  String   @id @db.Uuid @default(uuid())
  code Int
  name        String
  account_type_id Int //  kas/bank/giro/piutang/hutang
  description String?
  store_id String? @db.Uuid
  company_id String @db.Uuid
  deactive Boolean @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  deleted_at   DateTime?
  created_by  String? @db.Uuid
  updated_by  String? @db.Uuid

  store Stores? @relation(fields: [store_id], references: [id])
  company Companies @relation(fields: [company_id], references: [id])
  account_type Account_Types @relation(fields: [account_type_id], references: [id])
  journal_accounts Journal_Accounts[]
  operation Operations[]

  trans_detail Trans_Details[]
  trans_detail_recurring Trans_Details_Recurring[]
  tutup_kasir_acc_pusat TutupKasir[] @relation("AccountPusat")
  tutup_kasir_acc_kasir TutupKasir[] @relation("AccountKasir")
  trans_account_settings Trans_Account_Settings[]

  @@index([company_id, deleted_at, store_id, account_type_id])
}


model Journals {
  id  Int   @default(autoincrement()) @id
  store_id   String @db.Uuid  
  store Stores? @relation(fields: [store_id], references: [id])
  name        String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  deleted_at   DateTime?
  journal_accounts Journal_Accounts[]

  @@index([store_id, deleted_at])
}

model Journal_Accounts { 
  id Int @default(autoincrement()) @id
  journal_id Int
  account_id String @db.Uuid

  journal Journals? @relation(fields: [journal_id], references: [id])
  account Accounts? @relation(fields: [account_id], references: [id])
}

model Trans_Type {
  id Int   @default(autoincrement()) @id
  name String
  code String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  trans Trans[]
  trans_recurring Trans_Recurring[]

  @@unique([code])
}

// Miscellaneous Income / Expenses transaction only
model Trans {
  id String   @id @db.Uuid @default(uuid())
  code String
  store_id String @db.Uuid
  trans_date DateTime @default(now())
  trans_type_id Int
  total Decimal?
  // TODOELLA weight_total, sub_total_price, tax_price dihapus
  weight_total Decimal?
  sub_total_price Decimal?
  tax_price Decimal?
  description String?
  approve Int @default(0) // 0 = draft, 1 = approve, 0 = dissaprove

  approve_by String? @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String @db.Uuid
  updated_by String? @db.Uuid
  deleted_at DateTime?

  trans_details Trans_Details[]
  trans_type Trans_Type @relation(fields: [trans_type_id], references: [id])
  store Stores @relation(fields: [store_id], references: [id])
  @@index([store_id, trans_type_id, deleted_at])
  @@unique([code, store_id])
}

// Miscellaneous Income / Expenses transaction details only
model Trans_Details {
  id String  @id @db.Uuid @default(uuid())
  trans_id String @db.Uuid
  account_id String @db.Uuid
  kas Boolean @default(false)
  amount Decimal
  description String?
  
  deleted_at DateTime?
  trans Trans? @relation(fields: [trans_id], references: [id], map: "Trans_Details_trans_id_fkey_Trans")

  account Accounts @relation(fields: [account_id], references: [id])

  @@index([trans_id, deleted_at])
}

model TutupKasir {
  id String  @id @db.Uuid @default(uuid())
  store_id String @db.Uuid
  account_id String @db.Uuid
  code String
  date DateTime
  saldo_awal Decimal
  penjualan_cash Decimal
  penjualan_transfer Decimal
  total_penjualan Decimal
  pembelian Decimal
  pengeluaran Decimal
  gadai Decimal
  ambil_gadai Decimal
  setor_pusat Decimal
  account_pusat_id String @db.Uuid
  saldo_akhir Decimal
  tanggal_buka DateTime

  created_at DateTime
  created_by String @db.Uuid
  updated_at DateTime
  updated_by String @db.Uuid
  deleted_at DateTime?
  
  account Accounts @relation("AccountKasir",fields: [account_id], references: [id])
  account_pusat Accounts @relation("AccountPusat",fields: [account_pusat_id], references: [id])
}

model GoldPrice {
  id Int   @default(autoincrement()) @id
  sellPrice Decimal
  buyPrice Decimal
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Trans_Recurring {
    id String   @id @db.Uuid @default(uuid())
    store_id String @db.Uuid
    trans_start_date DateTime
    trans_last_date  DateTime?
    recurring_period_code String
    trans_type_id Int
    total Decimal?
    description String?
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    created_by String @db.Uuid
    updated_by String @db.Uuid
    deleted_at DateTime?

    trans_details_recurring Trans_Details_Recurring[]
    trans_type Trans_Type @relation(fields: [trans_type_id], references: [id])
    store Stores @relation(fields: [store_id], references: [id])
    recurring_period Recurring_Period @relation(fields: [recurring_period_code], references: [code])
}

model Trans_Details_Recurring {
  id String  @id @db.Uuid @default(uuid())
  trans_id String @db.Uuid
  account_id String @db.Uuid
  kas Boolean @default(false)
  amount Decimal
  description String?
  
  trans_recurring Trans_Recurring? @relation(fields: [trans_id], references: [id], map:"Trans_Details_trans_id_fkey_Trans_Recurring")

  account Accounts @relation(fields: [account_id], references: [id])

  @@index([trans_id])
}

model Recurring_Period {
  id Int   @default(autoincrement()) @id
  name String
  code String @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  trans_recurring Trans_Recurring[]
}

model Action_Account_Settings {
  id Int   @default(autoincrement()) @id
  action String @unique
  description String
  name String?
  created_at DateTime @default(now())

  trans_Account_settings Trans_Account_Settings[]
}

// Accounts used for transactions
// Notes: PPN dibayar = PPN keluar(kredit) - PPN Masukan(debit).
model Trans_Account_Settings {
  id Int   @default(autoincrement()) @id
  store_id String @db.Uuid
  // company_id String? @db.Uuid // Kesimpulan: frontend pengaturan otomatis transaksi per account di atur per toko jadi gk mungin ada scope company_id
  account_id String @db.Uuid
  action String // tax, discount, pm1 (cash), pm2 (bank transfer), pm3 (Credit Card), pm4 (Debit Card) 

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  store Stores @relation(fields: [store_id], references: [id])
  // company Companies? @relation(fields: [company_id], references: [id])
  account Accounts @relation(fields: [account_id], references: [id])
  maction Action_Account_Settings @relation(fields: [action], references: [action])
  @@unique([store_id,action])
  @@index([store_id, action])
}

model Report_Journals {
  id String @id @db.Uuid @default(uuid())
  trans_id String? @db.Uuid
  code String 
  company_id String @db.Uuid
  company_name String
  company_code String?
  store_id String @db.Uuid
  store_name String
  store_code String?
  trans_date DateTime
  trans_type_id Int
  trans_type_code String  // Uang keluar lain / Uang masuk lain / Sales
  trans_type_name String 
  description String?
  account_id String @db.Uuid
  account_code Int
  account_name String
  amount Decimal
  detail_description String?
  cash_bank Boolean @default(false) // true = Cash/Bank Account, false = Destination Account

  @@index([code, company_id, store_id, trans_id, account_id, trans_date])
}

model Stock_Source {
  id            Int             @id @default(autoincrement())
  name          String
  code         String
  report_stocks Report_Stocks[]

  @@unique([code])
}

model Report_Stocks {
  id                String       @id @default(uuid()) @db.Uuid
  store_id          String       @db.Uuid
  source_id         Int
  trans_id          String?      @db.Uuid
  trans_code        String?
  trans_date        DateTime    // product created_at
  category_id       String       @db.Uuid
  category_code     String?
  category_name     String?
  type_id           String       @db.Uuid
  type_code         String?
  type_name         String?
  product_id        String       @db.Uuid
  product_name      String?
  product_code      String?
  product_code_code String? // barcode
  product_code_id   String       @db.Uuid
  weight            Decimal      @db.Decimal
  price             Decimal      @db.Decimal // INSTOCK -> buy price (total jd kalo qty 2 brt total price 2 qty), SALES -> fixed price
  total_price       Decimal?      @db.Decimal // SALES -> total_price (termasuk diskon dll)
  qty               Int         @default(1)
  created_at        DateTime    @default(now())
  created_by        String?       @db.Uuid
  source            Stock_Source @relation(fields: [source_id], references: [id])
  store             Stores        @relation(fields: [store_id], references: [id])

  @@index([trans_date])
}

model Operations {
  id          String  @id @default(uuid()) @db.Uuid
  code        String
  name        String
  price       Decimal @db.Decimal
  uom         String
  description String? @db.Text
  store_id    String  @db.Uuid
  account_id  String? @db.Uuid

  store   Stores    @relation(fields: [store_id], references: [id])
  account Accounts? @relation(fields: [account_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([deleted_at])
}

// Hutang
model Report_Payable {
  id String @id @db.Uuid @default(uuid())
  store_id String @db.Uuid
  created_at DateTime @default(now())
  record_type String  // Nota beli / Nota bayar beli
  trans_code String
  trans_date DateTime
  due_date DateTime
  amount Decimal
  payment_id String? @db.Uuid
  payment_code String?
  payment_date DateTime?
  payment_amount Decimal?
}

// Piutang
model Report_Receivable {
  id String @id @db.Uuid @default(uuid())
  store_id String @db.Uuid
  created_at DateTime @default(now())
  record_type String  // Nota beli / nota bayar
  trans_code String
  trans_date DateTime
  due_date DateTime
  amount Decimal
  payment_id String? @db.Uuid
  payment_code String?
  payment_date DateTime?
  payment_amount Decimal?
}